[global]
; 将 PHP-FPM 的错误日志输出到 logs 目录下的 php-fpm-error.log 文件，便于集中管理和查看分析
error_log = logs/php-fpm-error.log
; 提高日志级别，仅记录错误信息，减少不必要的日志记录，提升性能
log_level = error

[www]
; 指定 PHP-FPM 接受 FastCGI 请求的地址，使用 Unix 套接字方式
listen = /run/php-fpm.sock
; 设置 Unix 套接字的权限，确保 Nginx 等其他服务可以正常连接
;listen.mode = 0660
; 关联 Unix 套接字的用户和组，与 Nginx 等服务保持一致，便于通信
;listen.owner = nginx
;listen.group = nginx

; 注释掉的配置项，若取消注释，PHP-FPM 进程将以 nobody 用户和组的身份运行
;user = nobody
;group = nobody

; 启用状态页面，通过访问 /fpm-status 路径可以查看 PHP-FPM 的状态信息
pm.status_path = /fpm-status

; 使用按需（ondemand）进程管理模式，根据请求动态创建和销毁子进程，节省资源
pm = ondemand
; 调整最大子进程数量，根据服务器的内存和 CPU 资源合理设置，这里假设服务器资源充足，设置为 200
pm.max_children = 200
; 空闲进程存活时间，适当延长以减少频繁创建和销毁进程的开销，设置为 30 秒
pm.process_idle_timeout = 30s
; 每个子进程处理的最大请求数，适当提高以减少进程创建和销毁的频率，设置为 5000
pm.max_requests = 5000

; 确保 PHP-FPM 工作进程可以访问环境变量进行配置
clear_env = no
; 捕获 PHP 脚本的输出，方便调试和排查问题
catch_workers_output = yes
; 移除日志中 'child 10 said into stderr' 这样的前缀，使日志更简洁
decorate_workers_output = no

; 启用 ping 页面，用于健康检查
ping.path = /fpm-ping
; 设置 ping 页面的响应内容，便于自动化监控识别
ping.response = pong

; 设置请求超时时间，避免长时间占用资源，设置为 60 秒
request_terminate_timeout = 60s
; 设置慢请求日志记录，记录处理时间超过 10 秒的请求，方便性能调优
request_slowlog_timeout = 10s
slowlog = logs/php-fpm-slow.log