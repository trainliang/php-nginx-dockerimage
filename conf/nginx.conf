# 自动设置 Nginx 工作进程的数量，根据服务器 CPU 核心数量动态调整，以充分利用服务器资源
worker_processes auto;

# 将 Nginx 的错误日志输出到 /logs/error.log 文件，日志级别设置为 warn（警告），
# 意味着只有警告及以上级别的错误信息才会被记录
error_log /logs/error.log warn;

# 指定 Nginx 主进程的 PID（进程 ID）文件的存储路径为 /run/nginx.pid，
# 该文件用于记录 Nginx 主进程的 ID，便于管理和监控 Nginx 进程
pid /run/nginx.pid;

# 这是一个被注释掉的配置项，若取消注释，Nginx 工作进程将以 nobody 用户的身份运行
#user nobody;

# events 块用于配置 Nginx 处理连接的方式
events {
    # 每个工作进程允许同时建立的最大连接数调整为 4096，可根据服务器性能调整
    worker_connections 4096;
    # 使用高效的事件模型，epoll 适用于 Linux 系统，可提高连接处理效率
    use epoll;
}

# http 块包含了所有 HTTP 服务器的配置
http {
    # 包含 MIME 类型的配置文件，该文件定义了不同文件扩展名对应的 MIME 类型
    include mime.types;

    # 当遇到未知文件类型时，将其视为二进制文件进行处理
    default_type application/octet-stream;

    # 定义一个自定义的日志格式，命名为 main_timed，用于记录请求的详细信息，包括响应时间
    log_format main_timed '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" '
                          '$request_time $upstream_response_time $pipe $upstream_cache_status';

    # 将访问日志输出到 /logs/access.log 文件，并使用上面定义的 main_timed 日志格式
    access_log /logs/access.log main_timed;

    # 将错误日志再次强调输出到 /logs/error.log 文件，日志级别设置为 notice
    error_log /logs/error.log notice;

    # 保持连接的超时时间设置为 90 秒，即在这个时间内没有新的请求，连接将被关闭
    keepalive_timeout 90;

    # 限制客户端请求体的最大大小为 10MB，防止过大的请求占用过多资源
    client_max_body_size 10m;

    # 将临时文件写入 /tmp 目录，这样非特权用户也可以创建这些文件
    # 客户端请求体的临时文件存储路径
    client_body_temp_path /tmp/client_temp;
    # 代理临时文件存储路径
    proxy_temp_path /tmp/proxy_temp_path;
    # FastCGI 临时文件存储路径
    fastcgi_temp_path /tmp/fastcgi_temp;
    # uWSGI 临时文件存储路径
    uwsgi_temp_path /tmp/uwsgi_temp;
    # SCGI 临时文件存储路径
    scgi_temp_path /tmp/scgi_temp;

    # 隐藏用于标识服务器的 HTTP 头部信息，防止信息泄露
    # 隐藏代理响应中的 X-Powered-By 头部
    proxy_hide_header X-Powered-By;
    # 隐藏 FastCGI 响应中的 X-Powered-By 头部
    fastcgi_hide_header X-Powered-By;
    # 关闭显示 Nginx 服务器的版本信息
    server_tokens off;

    # 启用 gzip 压缩功能，默认对符合条件的响应进行压缩
    gzip on;
    # 对所有代理的响应都进行 gzip 压缩
    gzip_proxied any;
    # 根据 CloudFlare 的推荐设置，指定需要进行 gzip 压缩的 MIME 类型
    gzip_types text/richtext text/plain text/css text/x-script text/x-component text/x-java-source text/x-markdown application/javascript application/x-javascript text/javascript text/js image/x-icon image/vnd.microsoft.icon application/x-perl application/x-httpd-cgi text/xml application/xml application/rss+xml application/vnd.api+json application/x-protobuf application/json multipart/bag multipart/mixed application/xhtml+xml font/ttf font/otf font/x-woff image/svg+xml application/vnd.ms-fontobject application/ttf application/x-ttf application/otf application/x-otf application/truetype application/opentype application/x-opentype application/font-woff application/eot application/font application/font-sfnt application/wasm application/javascript-binast application/manifest+json application/ld+json application/graphql+json application/geo+json;
    # 在响应头中添加 Vary: Accept-Encoding，告诉缓存服务器不同的编码版本需要分别缓存
    gzip_vary on;
    # 禁用对 IE6 浏览器的 gzip 压缩，因为 IE6 对 gzip 的支持存在问题
    gzip_disable "msie6";

    # 开启 http2 支持，提高 HTTP 传输性能
    http2 on;

    # 包含 /etc/nginx/conf.d 目录下所有以 .conf 结尾的配置文件，方便管理多个服务器配置
    include /etc/nginx/conf.d/*.conf;
}